############################TRAINING SET##################################
#
#
#This script assigns the textural information from each segment to each defined class
#Any questions or improvements can be emailed to Ximena Tagle: xtagle@iiap.org.pe
#
#

###SET WD
#setwd("/home/xtagle/UAV/Results/") #Linux
setwd("G:/My Drive/Monan/Taller_Oct/") #Windows

###LOAD LIBRARIES
library(raster)
library(maptools)
library(rgdal)
library(sp)
library(dplyr)
library(sf)

####LOAD LAYER_STACK
raster_stack<-stack("./6_Classification/layers_JH_1_5001.tif")
names(raster_stack)<-c("area",  "compactness",  "fd",   "length", "mean_entr_RGB.blue",  "mean_entr_RGB.green",
                       "mean_entr_RGB.red", "mean_RGB.blue", "mean_RGB.green",
                       "mean_RGB.red") 

###LOAD CLASS VECTOR
##To use when you have GPS points with ground information
#points<-readOGR("./5_Training/Training_classes.shp")

##To use if the training data were obtained from another source (polygons digitized in QGIS for example)
#Segments with the class assigned
classes<-st_read(dsn="./5_Training", layer="segments_JH_1_5001_class") 
Classes.F<- dplyr::filter(classes, complete.cases(label)) #SELECT ONLY SEGMENTS WITH A CLASS ASSIGNED
head(Classes.F)
Classes.F<- as(Classes.F, "Spatial") #convert to sp 

#Extract a point from each segment
points<-spsample(Classes.F, n=101, type="stratified")#only extracts the coordinates
points.df<-as.data.frame(points)
head(points)
plot(points, col="red")


# #Polygons with training data bigger than segments
# classes<-readOGR(dsn="./5_Training", layer="segments_JH_1_5001_class") 
# head(classes@data)
# classes.df<-as.data.frame(classes)
# head(classes.df)
# summary(classes.df)

# #Load segments
# segments<-readOGR(dsn="./2_Segmentation", layer="segments_JH_1_5001")

# #Reduce info by sampling
# points<-spsample(segments, n=500, type="stratified")#only extracts coordinates... 
# points.df<-as.data.frame(points)
# head(points)
# plot(points)

####LOAD IMAGE
image.path="./1_Clip/JH_1.tif"
image=stack(image.path)

###VISUALIZE
plotRGB(image)
plot(Classes.F, bg="transparent", add=T)
plot(points, col="red", bg="transparent", add=T)

###EXTRACT LAYER STACK VALUES
Valuesd<- raster::extract(raster_stack, points, df=T, method='simple', fun=mean, sp=T)
head(Valuesd@data)
names(Valuesd@data)

###EXTRACT INFO CLASSSES
class<-over(Valuesd, Classes.F)
class.df<-as.data.frame(class)
head(class)

class.f<-cbind(points.df,class.df)
head(class.f)

species<-cbind(class.f,Valuesd@data)
head(species)

coordinates(species) <- ~ x1+x2
head(species@data)

###EXPORT VECTOR AS .shp
writeOGR(species,"./5_Training", layer="training", driver="ESRI Shapefile")


###EXPORT VECTOR AS A RASTER
train<-rasterize(species, layer_stack, filename="./5_Training/training",
                 na.rm=T, overwrite=T)


###EXPORT DATA AS .csv
class.df<-as.data.frame(species)
plot(class.df)
summary(class.df)
write.table(class.df,file="./5_Training/Training_data.csv",quote=T,sep=",", na = "NA",
            dec = ".", row.names = T,col.names = T)



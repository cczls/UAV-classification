############################CLASSIFICATION##################################
#
#
#This script performs an object-based classification using information from segments as inputs. Different classification models can be used at the same time
#Any questions or improvements can be emailed to Ximena Tagle: xtagle@iiap.org.pe
#
#

###SET WD
#setwd("/home/xtagle/UAV/Results/") #Linux
setwd("G:/My Drive/Monan/Taller_Oct") #Windows

###LOAD LIBRARIES
library(raster)
library(maptools)
library(rgdal)
library(class)
library(rgeos)
library(rgdal)
library(fields)
library(sp)
library(spgrass7)
library(rgrass7)
library(ProjectTemplate)
library(reshape)
library(caret)
library(ggplot2)
library(knitr)

###LOAD FUNCTIONS
source("./lib/classification.multiple.ho.R")
source("./lib/polygonizeR.R")

####LOAD LAYER_STACK
beginCluster()#to speed up the process
####LOAD LAYER_STACK
layer_stack<-stack("./6_Classification/layers_JH_1_5001.tif")
names(layer_stack)<-c("area",  "compactness",  "fd",   "length", "mean_entr_RGB.blue",  "mean_entr_RGB.green",
                      "mean_entr_RGB.red", "mean_RGB.blue", "mean_RGB.green",
                      "mean_RGB.red") 

#If you want to see all the layers one by one
beginCluster() #speeds up
animate(layer_stack) 
endCluster()
#vizualize the first layers
plot(layer_stack)


###LOAD CLASS VECTOR
Training.p<-shapefile("./5_Training/training.shp") #Raster and training sets must have the same variables names
head(Training.p@data)
plot(Training.p)


Training.p.df<-as.data.frame(Training.p)
head(Training.p.df)

Training.p.df<- dplyr::filter(Training.p.df, complete.cases(label)) #use in case there is a point without label

names(Training.p.df) <- c("ID","value", "class", "area", "compactness",  "fd",   "length", "mean_entr_RGB.blue",  "mean_entr_RGB.green",
                          "mean_entr_RGB.red", "mean_RGB.blue", "mean_RGB.green",
                          "mean_RGB.red", "coord.x", "coord.y")   

head(Training.p.df)




#### DEFINE THE TRAINING INDICES
inTrain <- createDataPartition(Training.p.df$class, p = 2/3, list = F); 


#### DEFINE THE FORMULA
fmla <- class ~ compactness+mean_entr_RGB.green+mean_RGB.green+fd+ #Select the layers that could help to distinguish the classes
                mean_entr_RGB.blue



####CLASSIFICATION
results<-classification.multiple.ho(data=Training.p.df,     #dataset
                                    train.ind=inTrain, #training indices
                                    fmla,         #formula
                                    k=8,          #number of folds for training
                                    times=10,     #number of resamples for training
                                    methods=c("knn", "rf"),  #Write which classification  is needed other options are "svmRadial", "rpart"
                                    tuneLength=10, #number of parameters to test
                                    print.report=TRUE,
                                    output.name="multiple_JH_5001")


#LOAD THE MODEL
load("./6_Classification/reports/multiple_JH_5001/results_ho.Rdata")
model=results.ho[[2]]$rf


#PREDICT FOR THE IMAGE USING RF MODEL
beginCluster()#to speed up the process
system.time(d <- clusterR(layer_stack, predict, args=list(model=model), filename = "./6_Classification/predicted_output_rf_JH_1_5001.tif"))
endCluster()


###TO VISUALIZE THE RESULTS##########
###INITIATE GRASS-R CONNECTION
initGRASS("C:/Program Files/GRASS GIS 7.2.2", tempdir(), override=TRUE) #path to GRASS

#CONVERT TO POLYGON
d<-raster("./6_Classification/predicted_output_rf_JH_1_5001.tif")
gdal_polygonizeR(d, "./6_Classification/predicted_output_rf_JH_1_5001")


#VISUALIZE VALIDATION POINTS
training <- Training.p.df[inTrain, ]
coordinates(training) <- ~ coord.x+coord.y
testing <- Training.p.df[-inTrain, ]
coordinates(testing) <- ~ coord.x+coord.y


####LOAD IMAGE
image.path="./1_Clip/JH_1.tif"
image=stack(image.path)

#Visualize info
plotRGB(image)
points(training, pch=20, col="blue", cex=0.8,bg="transparent", add=TRUE)
points(testing, pch=20, col="red", cex=0.8,, bg="transparent", add=TRUE)
legend("bottomright", legend=c("training p.", "validation p."), bty = "n",
       pch=20, col=c("blue", "red"))

